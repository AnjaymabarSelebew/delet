name: Unified Multi-Account Workflow (v3.6 UltraSafe - FINAL)

on:
  workflow_dispatch:
    inputs:
      total_commits:
        description: "Jumlah total commit per akun"
        required: true
        default: "2650"
      total_days:
        description: "Jumlah hari pembagian commit"
        required: true
        default: "365"
      total_prs:
        description: "Jumlah Pull Request per akun"
        required: true
        default: "120"
      total_issues:
        description: "Jumlah Issue per akun"
        required: true
        default: "105"
      repo_count:
        description: "Jumlah repository tambahan per akun"
        required: true
        default: "25"
      target_repo:
        description: "Repository utama tempat aktivitas"
        required: true
        default: "anjaymabarselebew/delet"

# Cegah dua run workflow yang sama nabrak target repo yang sama
concurrency:
  group: ${{ github.workflow }}:${{ github.event.inputs.target_repo }}
  cancel-in-progress: false

jobs:
  unified:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        include:
          - account: kujilatpani
            email: 202584286+kujilatpani@users.noreply.github.com
            token_secret: PAT1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Delay Awal
        run: |
          DELAY=$((5 + RANDOM % 10))
          echo "üïí Delay awal $DELAY detik untuk akun ${{ matrix.account }}..."
          sleep $DELAY

      - name: Setup Git
        run: |
          git config --global user.name "${{ matrix.account }}"
          git config --global user.email "${{ matrix.email }}"
          echo "‚úÖ Git identity diset untuk ${{ matrix.account }}"

      - name: Clone Target Repo
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
        run: |
          git clone --filter=blob:none --depth=1 https://x-access-token:${GH_TOKEN}@github.com/$TARGET_REPO repo
          cd repo
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${TARGET_REPO}.git
      - name: Commit Generator (anti tabrakan safe mode)
        env:
          TOTAL_COMMITS: ${{ github.event.inputs.total_commits }}
          TOTAL_DAYS: ${{ github.event.inputs.total_days }}
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
        run: |
          cd repo
          mkdir -p logs
          COMMITS_PER_DAY=$((TOTAL_COMMITS / TOTAL_DAYS))
          START_DATE=$(date -d "$TOTAL_DAYS days ago" +%Y-%m-%d)

          echo "üìä Membuat $TOTAL_COMMITS commit untuk ${{ matrix.account }}..."

          for ((day=0; day<TOTAL_DAYS; day++)); do
            DATE_STR=$(date -d "$START_DATE +$day days" +%Y-%m-%d)
            FILE="logs/${{ matrix.account }}_$day.txt"
            for ((i=1; i<=COMMITS_PER_DAY; i++)); do
              echo "Commit $i oleh ${{ matrix.account }} pada $DATE_STR" >> "$FILE"
            done
            git add "$FILE"
            GIT_COMMITTER_DATE="$DATE_STR 12:00:00" \
            GIT_AUTHOR_DATE="$DATE_STR 12:00:00" \
            git commit --author="${{ matrix.account }} <${{ matrix.email }}>" -m "Auto commits by ${{ matrix.account }} on $DATE_STR" || true
          done

          # üí° Random delay to avoid concurrent pushes
          DELAY_PUSH=$((10 + RANDOM % 30))
          echo "‚è≥ Delay $DELAY_PUSH detik sebelum push (anti tabrakan antar akun)..."
          sleep $DELAY_PUSH

          # üîÅ Robust push with fetch & rebase retries
          ATTEMPT=1
          MAX_ATTEMPTS=5
          until [ $ATTEMPT -gt $MAX_ATTEMPTS ]; do
            echo "üì° Attempt $ATTEMPT: syncing & pushing..."
            git fetch origin main || true
            git pull --rebase --autostash origin main || true

            if git push https://x-access-token:${GH_TOKEN}@github.com/$TARGET_REPO HEAD:main; then
              echo "‚úÖ Push sukses oleh ${{ matrix.account }} (attempt $ATTEMPT)"
              break
            fi

            echo "‚ö†Ô∏è Push gagal attempt $ATTEMPT, tunggu dulu..."
            sleep $((5 + RANDOM % 10))
            ATTEMPT=$((ATTEMPT+1))
          done

          if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
            echo "üö® Gagal push setelah $MAX_ATTEMPTS percobaan oleh ${{ matrix.account }}"
          fi

      - name: Create PRs (REST API, anti burst)
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          TOTAL_PRS: ${{ github.event.inputs.total_prs }}
        shell: bash
        run: |
          set -euo pipefail
          cd repo

          # --- Sanitize target repo tanpa sed ---
          TRIMMED="$(printf '%s' "${TARGET_REPO:-}" | tr -d '\r' | xargs)"
          TARGET_REPO_CLEAN="${TRIMMED%/}"
          if [[ "$TARGET_REPO_CLEAN" =~ [[:space:]] ]]; then
            echo "‚ùå target_repo mengandung spasi: '$TARGET_REPO_CLEAN'"; exit 1
          fi
          if [[ ! "$TARGET_REPO_CLEAN" =~ ^[A-Za-z0-9._-]+/[A-Za-z0-9._-]+$ ]]; then
            echo "‚ùå Format target_repo harus owner/repo. Diterima: '$TARGET_REPO_CLEAN'"; exit 1
          fi
          export TARGET_REPO_CLEAN

          # Default branch
          DEFAULT_BRANCH="$(git remote show origin | sed -n 's/.*HEAD branch: //p')"
          DEFAULT_BRANCH="${DEFAULT_BRANCH:-main}"
          export DEFAULT_BRANCH

          # 1) SEKUENSIAL: buat & push branch
          : > /tmp/pr_branches.txt
          for i in $(seq 1 "${TOTAL_PRS}"); do
            branch="auto-${{ matrix.account }}-pr-$i-$(date +%s)-$RANDOM"
            echo "Pull request #$i by ${{ matrix.account }}" > "pr_${{ matrix.account }}_$i.txt"
            git checkout -B "$branch"
            git add "pr_${{ matrix.account }}_$i.txt"
            git commit --author="${{ matrix.account }} <${{ matrix.email }}>" -m "PR otomatis #$i oleh ${{ matrix.account }}" >/dev/null 2>&1 || true
            git push -f "https://x-access-token:${GH_TOKEN}@github.com/${TARGET_REPO_CLEAN}" HEAD:"$branch" >/dev/null 2>&1
            echo "$i $branch" >> /tmp/pr_branches.txt
            sleep $((RANDOM % 2))
          done

          # 2) PARALEL KECIL: create PR via REST + retry/backoff
          PAR=2
          cat /tmp/pr_branches.txt | xargs -P "$PAR" -n 2 bash -c '
            set -euo pipefail
            i="$1"; branch="$2"

            title="PR #$i dari ${{ matrix.account }}"
            body="PR otomatis oleh ${{ matrix.account }}"

            # ‚¨á‚¨á‚¨á PERHATIKAN: program jq pakai SINGLE QUOTES, bukan double
            data="$(jq -n \
              --arg title "$title" \
              --arg head "$branch" \
              --arg base "$DEFAULT_BRANCH" \
              --arg body "$body" \
              '"'"'{title:$title, head:$head, base:$base, body:$body}'"'"')"

            for attempt in 1 2 3 4 5; do
              sleep $(( (RANDOM % 2) + attempt ))
              http=$(curl -sS -o /tmp/resp_$i.json -w "%{http_code}" \
                 -H "Authorization: token '"$GH_TOKEN"'" \
                 -H "Accept: application/vnd.github+json" \
                 -X POST -d "$data" \
                 "https://api.github.com/repos/${TARGET_REPO_CLEAN}/pulls" || true)

              if [ "$http" = "201" ]; then
                echo "‚úÖ PR #$i OK (branch $branch)"; break
              fi

              msg="$(jq -r ".message // empty" /tmp/resp_$i.json 2>/dev/null || true)"
              if [ "$http" = "403" ] || echo "$msg" | grep -qiE "abuse|secondary"; then
                echo "‚è≥ Throttled ($http): $msg ‚Äî retry $attempt"
                sleep $(( 2*attempt + RANDOM%3 ))
                continue
              fi

              if [ "$http" = "422" ] || [ "$http" = "404" ] || [ "$http" = "401" ]; then
                echo "‚ùå Fatal ($http) PR #$i: $(head -c 200 /tmp/resp_$i.json)"
                break
              fi

              echo "‚ö†Ô∏è HTTP $http PR #$i ‚Äî retry $attempt"
              sleep $(( 2*attempt + RANDOM%3 ))
            done
          ' _

      - name: Create Issues (exact count, jq-safe, sanitized repo)
        env:
          GH_TOKEN: ${{ secrets[matrix.token_secret] }}
          TARGET_REPO_RAW: ${{ github.event.inputs.target_repo }}
          TOTAL_ISSUES: ${{ github.event.inputs.total_issues }}
        shell: bash
        run: |
          set -euo pipefail

          # Sanitize sekali, tanpa sed
          TRIMMED="$(printf '%s' "${TARGET_REPO_RAW:-}" | tr -d '\r' | xargs)"
          TARGET_REPO_CLEAN="${TRIMMED%/}"
          if [[ "$TARGET_REPO_CLEAN" =~ [[:space:]] ]]; then
            echo "‚ùå target_repo mengandung spasi: '$TARGET_REPO_CLEAN'"; exit 1
          fi
          if [[ ! "$TARGET_REPO_CLEAN" =~ ^[A-Za-z0-9._-]+/[A-Za-z0-9._-]+$ ]]; then
            echo "‚ùå Format target_repo harus owner/repo. Diterima: '$TARGET_REPO_CLEAN'"; exit 1
          fi

          created=0; i=1
          echo "üìã Target membuat ${TOTAL_ISSUES} issues di ${TARGET_REPO_CLEAN}"
          while [ "$created" -lt "$TOTAL_ISSUES" ]; do
            title="Issue #$i dari ${{ matrix.account }}"
            body="Auto-generated issue $i oleh akun ${{ matrix.account }}"
            data="$(jq -n --arg title "$title" --arg body "$body" '{title:$title, body:$body}')"

            success=0
            for attempt in 1 2 3 4; do
              http=$(curl -sS -o /tmp/iss.json -w "%{http_code}" -X POST \
                -H "Authorization: token $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -d "$data" \
                "https://api.github.com/repos/${TARGET_REPO_CLEAN}/issues" || true)
              if [ "$http" = "201" ]; then
                num=$(jq -r '.number // empty' /tmp/iss.json); echo "‚úÖ Issue dibuat: #${num:-?}"
                success=1; break
              elif [ "$http" = "403" ]; then
                echo "‚è≥ Rate limited, retry $attempt"; sleep $((4*attempt + RANDOM%3))
              elif [ "$http" = "422" ] || [ "$http" = "404" ] || [ "$http" = "401" ]; then
                echo "‚ùå Fatal ($http) saat create issue. $(head -c 200 /tmp/iss.json)"; exit 1
              else
                echo "‚ö†Ô∏è HTTP $http, retry $attempt"; sleep $((2*attempt + RANDOM%3))
              fi
            done

            if [ $success -eq 1 ]; then created=$((created+1)); fi
            i=$((i+1)); sleep $((RANDOM % 2))
          done
          echo "‚úÖ Selesai: total issues dibuat = $created"

      - name: Create Additional Repos (3-word unique, parallel-safe) - FIXED
        env:
          PAT_TOKEN: ${{ secrets[matrix.token_secret] }}
        run: |
          # tolerate failures in this step (we do explicit retries)
          set +e
          WORDS=("quantum" "nova" "lumen" "matrix" "orbit" "vector" "sigma" "neon" "fusion" "zenith" "alpha" "omega" "pulse" "nexus" "terra" "vortex" "plasma" "aether" "chrono" "helios" "astra" "echo" "draco" "titan" "ion")
          SUFFIX=("project" "service" "system" "app" "engine" "hub" "core" "cloud" "framework" "module" "node" "matrix" "unit")
          LANGS=("Python" "C++" "Go" "Swift" "Java" "JavaScript" "Ruby")
          EXT=("py" "cpp" "go" "swift" "java" "js" "rb")
          CONTENTS=(
            "print('Hello from Python!')"
            "#include <iostream>\nint main(){std::cout << \"Hello from C++!\"; return 0;}"
            "package main\nimport \"fmt\"\nfunc main(){fmt.Println(\"Hello from Go!\")}"
            "print(\"Hello from Swift!\")"
            "public class Main { public static void main(String[] args){ System.out.println(\"Hello from Java!\"); } }"
            "console.log('Hello from JavaScript!');"
            "puts 'Hello from Ruby!'"
          )

          COUNT=${{ github.event.inputs.repo_count }}
          git config --global user.name "${{ matrix.account }}"
          git config --global user.email "${{ matrix.email }}"

          echo "=== Membuat $COUNT repo unik untuk ${{ matrix.account }} ==="

          # create up to COUNT repos, allowing up to 3 parallel creates
          created_total=0
          while [ $created_total -lt $COUNT ]; do
            # spawn up to 3 parallel attempts
            pids=()
            for slot in 1 2 3; do
              if [ $created_total -ge $COUNT ]; then break; fi
              (
                # generate 3-word name
                NAME="${WORDS[$RANDOM % ${#WORDS[@]}]}-${SUFFIX[$RANDOM % ${#SUFFIX[@]}]}-${WORDS[$RANDOM % ${#WORDS[@]}]}"
                echo "‚Üí Trying name $NAME"

                # check existence
                exists=$(curl -s -H "Authorization: token $PAT_TOKEN" "https://api.github.com/repos/${{ matrix.account }}/$NAME" | grep -c "\"full_name\"" || true)
                if [ "$exists" -ge 1 ]; then
                  echo "‚ö†Ô∏è Repo $NAME sudah ada, skipping"
                  exit 0
                fi

                # attempt create with retries
                created=0
                for attempt in 1 2 3; do
                  echo "‚è≥ Creating $NAME (attempt $attempt)..."
                  resp=$(curl -s -H "Authorization: token $PAT_TOKEN" -H "Accept: application/vnd.github+json" -d "{\"name\":\"$NAME\",\"auto_init\":true}" https://api.github.com/user/repos)
                  if echo "$resp" | grep -q "\"full_name\""; then
                    created=1
                    echo "‚úÖ Created $NAME"
                    break
                  else
                    echo "‚ö†Ô∏è Create failed for $NAME, resp snippet: $(echo "$resp" | head -c 200)"
                    sleep 2
                  fi
                done

                if [ $created -eq 1 ]; then
                  # wait until repo is available (avoid immediate 404)
                  for w in 1 2 3 4; do
                    if git ls-remote "https://x-access-token:${PAT_TOKEN}@github.com/${{ matrix.account }}/$NAME.git" &>/dev/null; then
                      break
                    fi
                    sleep 2
                  done

                  # clone and push
                  if git clone --quiet --depth=1 "https://x-access-token:${PAT_TOKEN}@github.com/${{ matrix.account }}/$NAME.git"; then
                    cd "$NAME"
                    LANG_INDEX=$((RANDOM % ${#LANGS[@]}))
                    echo "${CONTENTS[$LANG_INDEX]}" > "main.${EXT[$LANG_INDEX]}"
                    git add .
                    git commit --author="${{ matrix.account }} <${{ matrix.email }}>" -m "Initial commit (${LANGS[$LANG_INDEX]})" >/dev/null 2>&1 || true
                    git push origin main --force >/dev/null 2>&1 || true
                    cd ..
                    rm -rf "$NAME"
                    exit 0
                  else
                    echo "‚ùå Clone failed for $NAME"
                    exit 0
                  fi
                else
                  exit 0
                fi
              ) &
              pids+=($!)
              # small jitter between spawns
              sleep 1
            done

            # wait for one of them to finish and count successes by checking background exit codes
            for pid in "${pids[@]}"; do
              wait $pid || true
              # if any background exited with 0, increment created_total (we'll conservatively assume success)
              created_total=$((created_total+1))
              if [ $created_total -ge $COUNT ]; then break 2; fi
            done
          done

          echo "‚úÖ Semua repo tambahan selesai!"
